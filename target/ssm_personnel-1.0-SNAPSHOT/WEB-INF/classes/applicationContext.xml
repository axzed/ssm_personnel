<?xml version="1.0" encoding="UTF-8"?>        
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">        

	<!-- 开启组件扫描 -->
	<context:component-scan base-package="com.axzed"></context:component-scan>

    <!--加载perperties配置文件的信息-->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>

    <!--加载druid资源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--spring整合mybatis后控制的创建连接用的对象-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.axzed.bean"/>
        <!--分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <prop key="helperDialect">mysql</prop>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--加载mybatis映射配置的扫描，将其作为spring的bean进行管理-->
    <!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册，
          遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中。自动扫描出来的mapper的
    bean的id为mapper类名（首字母小写） -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.axzed.mapper"/>
    </bean>
    
    <!-- 第一步 配置事务管理器  -->
<!--	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--		&lt;!&ndash; 注入dataSource &ndash;&gt;  -->
<!--		<property name="dataSource" ref="dataSource"></property>-->
<!--	</bean>-->
	
	<!--第二步 开启事务注解 -->
<!--	<tx:annotation-driven transaction-manager="transactionManager"/>-->
	
	<!--配置service作为spring的bean,注入dao-->
    <!-- <bean id="accountService" class="cn.zyj.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean> -->
	

</beans>